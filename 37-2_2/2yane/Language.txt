CoffeeScript - язык программирования код которого спокойно переносится в JavaScript.
CoffeeScript добавляет синтаксические возможности, применение которых не влияет на поведение программы, но делает использование языка более удобным для человека, улучшая читаемость кода и уменьшение его размера.
Создателем языка является Джереми Ашкенас. Изначально компилятор был написан на Ruby, но в версии 0.5, которая вышла 21 февраля 2010 года, компилятор был реализован на самом же CoffeeScript.
На официальном сайте языка есть раздел «try coffeescript», позволяющий выполнять программы на нём online
При этом не будет происходить запросов к серверу, код компилируется и исполняется непосредственно в браузере.
Для упрощения синтаксиса CoffeeScript эффективно использует отступы как в языке программирования Python.
Так же нет необходимости ставить в конце каждой строки точку с запятой. Конец строки автоматически интерпретируется, как конец выражения. К примеру:

 numbers = [0, 1, 2, 3]

Компилируется в:

	var numbers;

numbers = [0, 1, 2, 3];

Так же хотелось бы отметить что в языке CoffeScript фигурные скобки необязательны.
Что насчёт огромного количества закрывающих и открывающих скобок указывающие на блок кода? В них тоже нет необходимости. В CoffeeScript, используется подобно Python отступ для обозначения начала и конца блока.
CoffeeScript предоставляет ряд алиасов (Короткое, удобное для запоминания имя) для операторов и ключевых слов, делая код более читабельным и интуитивным. 
Для начала, операторы сравнения:
•	is соответствует ===
•	isnt компилируется в !==
•	== и != компилируется в === и !==
алиасы логических операторов.
•	and соответствует &&
•	or соответствует ||
•	not компилируется в !
•	Switch-Case

•	Начинается с ключевого слова switc, после чего указывается переменная, которую мы будем проверять. Каждому case или возможному значению предшествует ключевое слово when, затем следует выражение запуска, если значение совпадает. 
Не нужно указывать выражение break в конце каждого case выражения: CoffeeScript делает это для вас автоматически.

	switch time
 when 6.00 
  wakeUp()
  jotDownList()
 when 9.00 then startWorking()
 when 13.00 then eat()
 when 23.00
  finishUpWork()
  sleep()
 else doNothing()
Основные циклы
CoffeeScript предоставляет нам очень гибкий цикл while, который может быть модифицирован до функции, как циклы for или do-while.

	while work > time then freakOut()
 
while time > work 
  relax()
  mozyAround()
 
// Raw JS
 
while (work > time) {
  freakOut();
}
while (time > work) {
  relax();
  mozyAround();
}

until является другим семантическим улучшением и представляет из себя эквивалент while not. Пример:

	workOut() until energy < exhaustion 
 
// Raw JS
 
while (!(energy < exhaustion)) {
  workOut();
}
Обход коллекций циклом
Обход циклом массивов не вызывает сложностей. Нужно воспользоваться конструкцией for..in, для обхода массива:

	sites = ['CodeCanyon','ThemeForest','ActiveDen']
for site in sites
 alert site
Выражения на одной строке:

	sites = ['CodeCanyon','ThemeForest','ActiveDen']
alert site for site in sites
Функции
Создание и использование функций невероятно простое занятие с CoffeeScript. Для определения функции, вы перечисляете параметры, затем описываете тело функции. Давайте я покажу, как это выглядит:

	playing = (console, game = "Mass Effect") ->
  alert "Playing #{game} on my #{console}."
 
playing 'Xbox 360', 'New Vegas'
Это основной синтаксис создания и использования функций. Значения параметров по умолчанию, могут быть указаны на одной строке. CoffeeScript создаёт код, чтобы проверить было-ли передано значение или нет.
Вызов функции также прост. Вам не нужны скобки: передайте параметры один за другим.
Как всегда, вот вам пример сгенерированного кода:

	var playing;
playing = function(console, game) {
  if (game == null) {
    game = "Mass Effect";
  }
  return alert("Playing " + game + " on my " + console + ".");
};
playing('Xbox 360', 'New Vegas');
Добавление обычного JavaScript
Иногда, у нас нет другого выбора, нам нужно воспользоваться обычным JavaScript кодом внутри кода CoffeeScript. К счастью, такие случаи происходят довольно редко, но тем не менее инструмент для решения подобной проблемы, также существует.
Вы можете добавить обычный JS код, обернув его в грависы, также известные как обратные кавычки. Всё что находится между ними, не будут обрабатываться компилятором CoffeeScript.

	rawJS = `function() {
  return someSuperComplexThingie;
}`
 
// which nets you
 
var rawJS;
rawJS = function() {
  return someSuperComplexThingie;
};
Что насчёт библиотек?
Всё хорошо, вы можете использовать их также, как и раньше. CoffeeScript отлично работает со сторонними библиотеками, большими или маленькими, так как они просто компилируются в обычный JavaScript. Вам стоит переформатировать и/или отрефакторить ваш код, немного, но кроме этого, несовместимость не будет являться проблемой.
Я думаю CoffeeScript изменил мой подход к написанию JavaScript
